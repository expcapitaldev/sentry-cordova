name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release (optional)
        required: false
      force:
        description: Force a release even when there are release-blockers (optional)
        required: false

env:
   CACHED_DEPENDENCY_PATHS: |
     ${{ github.workspace }}/node_modules

   CACHED_BUILD_PATHS: |
     ${{ github.workspace }}/dist

   CACHED_CARTHAGE_PATHS: |
     ${{ github.workspace }}/src/ios/Carthage/Build/

   BUILD_CACHE_KEY: ${{ github.sha }}

jobs:
  job_install_deps:
    name: Install Dependencies
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v1
      - name: Compute dependency cache key
        id: compute_lockfile_hash
        run: echo "::set-output name=hash::${{ hashFiles('yarn.lock') }}"
      - name: Check dependency cache
        uses: actions/cache@v2
        id: cache_dependencies
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ steps.compute_lockfile_hash.outputs.hash }}
      - name: Install dependencies
        if: steps.cache_dependencies.outputs.cache-hit == ''
        run: yarn install
    outputs:
      dependency_cache_key: ${{ steps.compute_lockfile_hash.outputs.hash }}

  job_build:
    name: Build
    needs: job_install_deps
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v1
      - name: Check dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_deps.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@v2
        id: cache_built_packages
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Build packages
        if: steps.cache_built_packages.outputs.cache-hit == ''
        run: yarn build
    outputs:
      dependency_cache_key: ${{ needs.job_install_deps.outputs.dependency_cache_key }}

  job_carthage_build:
    name: Build Carthage Dependencies
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2
      - name: Check Carthage build cache
        uses: actions/cache@v2
        id: cache_built_carthage
        with:
          path: ${{ env.CACHED_CARTHAGE_PATHS }}
          key: ${{ hashFiles('src/ios/Cartfile') }}
      - name: Install Carthage
        if: steps.cache_built_carthage.outputs.cache-hit == ''
        run: brew install carthage
      - name: Build Cocoa SDK from Carthage
        if: steps.cache_built_carthage.outputs.cache-hit == ''
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GH_RELEASE_PAT }}
        run: make build

  job_artifacts:
    name: Upload Artifacts
    needs: [ job_build, job_carthage_build ]
    runs-on: macos-latest
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v1
      - name: Check dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_build.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Check Carthage build cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_CARTHAGE_PATHS }}
          key: ${{ hashFiles('src/ios/Cartfile') }}
      - name: Check that Carthage build exists
        run: test -d src/ios/Carthage || exit 1
      - name: Pack
        run: yarn pack
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: sentry-cordova-${{ github.sha }}
          path: |
            ${{ github.workspace }}/sentry-cordova-*

  job_release:
    name: Upload Release
    needs: [ job_artifacts ]
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
    - name: Download app artifact
      uses: actions/download-artifact@v2
      with:
        name: sentry-cordova-${{ github.sha }}
        path: |
          ${{ github.workspace }}/sentry-cordova
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: LIST
      run: |
        cd ${{ github.workspace }}/sentry-cordova
        ls -la
    - name: Upload Sentry Cordova
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/sentry-cordova/sentry-cordova-v${{ github.ref_name }}.tgz
        asset_name: sentry-cordova-v${{ github.ref_name }}.tgz
        asset_content_type: application/tgz

  release_npm:
    runs-on: ubuntu-latest
    needs: [ job_artifacts ]
    steps:
    - name: Download app artifact
      uses: actions/download-artifact@v2
      with:
        name: sentry-cordova-${{ github.sha }}
        path: |
          ${{ github.workspace }}
    - name: List file Directory
      run: |
        pwd
        tar -xf ${{ github.workspace }}/sentry-cordova-${{ github.sha }}
        ls -la ${{ github.workspace }}
    - name: Publish package on NPM ðŸ“¦
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
